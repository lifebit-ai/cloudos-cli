name: Secure Release (manual Docker/PyPI; OIDC without helper actions)

on:
  push:
    branches: [ main ]  # run on merges to main

permissions:
  contents: write   # to create/push git tags with GITHUB_TOKEN
  id-token: write   # to request an OIDC token for AWS STS

env:
  QUAY_REPO: quay.io/lifebitaiorg/cloudos-cli
  PYTHON_VERSION: "3.11"

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # -------- VERSION & TAGGING --------
      - name: Extract version from cloudos_cli/_version.py
        id: version
        run: |
          set -euo pipefail
          VER="$(grep -Po "__version__\s*=\s*['\"]\K[^'\"]+" cloudos_cli/_version.py)"
          [ -n "$VER" ] || { echo "Could not parse __version__"; exit 1; }
          VER="${VER#v}"  # drop leading 'v' if someone added it
          echo "VERSION=$VER"  >> "$GITHUB_OUTPUT"
          echo "GIT_TAG=v$VER" >> "$GITHUB_OUTPUT"

      - name: Create and push Git tag if missing
        run: |
          set -euo pipefail
          TAG="${{ steps.version.outputs.GIT_TAG }}"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists; skipping."
          else
            git tag -a "$TAG" -m "Release $TAG"
            git push origin "$TAG"
          fi

      # -------- GITHUB RELEASE --------
      - name: Create GitHub Release with auto-generated notes
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.GIT_TAG }}
          name: Release ${{ steps.version.outputs.GIT_TAG }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, 'a') || contains(steps.version.outputs.VERSION, 'b') || contains(steps.version.outputs.VERSION, 'rc') }}
          generate_release_notes: true
          body: |
            ##  CloudOS CLI ${{ steps.version.outputs.VERSION }}
            
            ```

      # -------- PYTHON SETUP --------
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      # -------- QUAY (no helper actions) --------
      - name: Test Quay.io login
        id: quay
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_LOGIN_ID }}
          password: ${{ secrets.QUAY_LOGIN_PWD }}
      - name: Build & push image to Quay (version + latest)
        run: |
          set -euo pipefail
          VER="${{ steps.version.outputs.VERSION }}"
          echo "Building Docker image for version: $VER"
          docker build -f Dockerfile -t "${QUAY_REPO}:${VER}" .
          docker push "${QUAY_REPO}:${VER}"
          echo "Pushed ${QUAY_REPO}:${VER}"
          
          docker tag  "${QUAY_REPO}:${VER}" "${QUAY_REPO}:latest"
          docker push "${QUAY_REPO}:latest"

      # -------- PYPI (no helper actions) --------
      - name: Build distribution (sdist + wheel)
        run: |
          set -euo pipefail
          echo "Building Python distribution packages..."
          python -m build

      - name: Upload to PyPI with twine
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_LOGIN_TOKEN }}
        run: |
          set -euo pipefail
          echo "Uploading to PyPI..."
          python -m twine upload --non-interactive dist/* --skip-existing
          echo "Successfully uploaded to PyPI"
